{
	"name": "data_flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customer_bronze",
						"type": "DatasetReference"
					},
					"name": "bronzeToSilverCustomers"
				},
				{
					"dataset": {
						"referenceName": "transaction_bronze",
						"type": "DatasetReference"
					},
					"name": "bronzeToSilverTransactions"
				},
				{
					"dataset": {
						"referenceName": "weblogs_bronze",
						"type": "DatasetReference"
					},
					"name": "bronzeToSilverWeblogs"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "customers_silver",
						"type": "DatasetReference"
					},
					"name": "customerSilver"
				},
				{
					"dataset": {
						"referenceName": "rejectCustomer",
						"type": "DatasetReference"
					},
					"name": "rejectsCustomer"
				},
				{
					"dataset": {
						"referenceName": "transactions_silver",
						"type": "DatasetReference"
					},
					"name": "transactionSilver"
				},
				{
					"dataset": {
						"referenceName": "rejectTransacitions",
						"type": "DatasetReference"
					},
					"name": "rejectsTransactions"
				},
				{
					"dataset": {
						"referenceName": "weblogs_silver",
						"type": "DatasetReference"
					},
					"name": "weblogsSilver"
				},
				{
					"dataset": {
						"referenceName": "rejectsweblogs",
						"type": "DatasetReference"
					},
					"name": "rejectsWeblogs"
				}
			],
			"transformations": [
				{
					"name": "derivedCustomer"
				},
				{
					"name": "customerCondition"
				},
				{
					"name": "derivedTransaction"
				},
				{
					"name": "transactionCondition"
				},
				{
					"name": "derivedWeblog"
				},
				{
					"name": "weblogCondition"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          Phone as integer,",
				"          SignupDate as string,",
				"          LoyaltyTier as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> bronzeToSilverCustomers",
				"source(output(",
				"          TransactionID as string,",
				"          CustomerID as string,",
				"          TransactionDate as string,",
				"          ProductID as string,",
				"          Quantity as string,",
				"          Amount as string,",
				"          StoreID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> bronzeToSilverTransactions",
				"source(output(",
				"          SessionID as string,",
				"          CustomerID as string,",
				"          Timestamp as string,",
				"          PageVisited as string,",
				"          DurationSeconds as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> bronzeToSilverWeblogs",
				"bronzeToSilverCustomers derive(CustomerID = toInteger(CustomerID),",
				"          SignupDate = toTimestamp(SignupDate, 'yyyy-MM-dd')) ~> derivedCustomer",
				"derivedCustomer split(!isNull(CustomerID) && !isNull(SignupDate),",
				"     disjoint: false) ~> customerCondition@(valid, reject)",
				"bronzeToSilverTransactions derive(TransactionID = toInteger(TransactionID),",
				"          CustomerID = toInteger(CustomerID),",
				"          Amount = toDouble(Amount),",
				"          TransactionDate = toTimestamp(TransactionDate, 'yyyy-MM-dd HH:mm:ss'),",
				"          StoreID = toInteger(StoreID),",
				"          ProductID = toInteger(ProductID),",
				"          Quantity = toInteger(Quantity)) ~> derivedTransaction",
				"derivedTransaction split(!isNull(CustomerID),",
				"     disjoint: false) ~> transactionCondition@(valid, reject)",
				"bronzeToSilverWeblogs derive(CustomerID = toInteger(CustomerID),",
				"          DurationSeconds = toInteger(DurationSeconds),",
				"          Timestamp = toTimestamp(Timestamp, 'yyyy-MM-dd HH:mm:ss')) ~> derivedWeblog",
				"derivedWeblog split(!isNull(CustomerID) && !isNull(Timestamp),",
				"     disjoint: false) ~> weblogCondition@(valid, reject)",
				"customerCondition@valid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: []) ~> customerSilver",
				"customerCondition@reject sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: []) ~> rejectsCustomer",
				"transactionCondition@valid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: []) ~> transactionSilver",
				"transactionCondition@reject sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: []) ~> rejectsTransactions",
				"weblogCondition@valid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: []) ~> weblogsSilver",
				"weblogCondition@reject sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: []) ~> rejectsWeblogs"
			]
		}
	}
}